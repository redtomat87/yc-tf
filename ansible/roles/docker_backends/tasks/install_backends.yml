- name: Install and configure Docker
  become: true
  tags:
    - install
  block:
    - name: Install initial dependencies
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
          - python3-pip
          - python3-setuptools
          - python3-docker
          - docker-compose
        state: present
        update_cache: true
        cache_valid_time: 3600

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Get Ubuntu version codename
      ansible.builtin.command: lsb_release -cs
      register: ubuntu_codename
      changed_when: false

    - name: Get system architecture
      ansible.builtin.command: dpkg --print-architecture
      register: system_architecture
      changed_when: false

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ system_architecture.stdout }}
          signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu
          {{ ubuntu_codename.stdout }} stable
        state: present
        filename: docker
        update_cache: true

    - name: Install Docker packages
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true

- name: Ensure Docker is running
  block:
    - name: Wait for Docker service to be ready
      ansible.builtin.wait_for:
        path: /var/run/docker.sock
        state: present
        delay: 10
        timeout: 120

    - name: Verify Docker service is running
      ansible.builtin.command: systemctl is-active docker
      register: docker_status
      until: docker_status.rc == 0
      retries: 5
      delay: 5
      changed_when: false

  rescue:
    - name: Restart Docker service
      ansible.builtin.service:
        name: docker
        state: restarted

    - name: Wait after restart
      ansible.builtin.wait_for:
        path: /var/run/docker.sock
        state: present
        delay: 10
        timeout: 120

    - name: Verify Docker service is running after restart
      ansible.builtin.command: systemctl is-active docker
      register: docker_status
      until: docker_status.rc == 0
      retries: 5
      delay: 5
      changed_when: false

  always:
    - name: Ensure Docker service is enabled
      ansible.builtin.service:
        name: docker
        enabled: true

    - name: Verify Docker service is running
      ansible.builtin.command: systemctl is-active docker
      register: docker_status
      until: docker_status.rc == 0
      retries: 10
      delay: 5
      changed_when: false

    - name: Ensure Docker service is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Ensure Docker service is running and enabled
    #  notify: Cleanup docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

- name: Configure Docker network and application
  become: true
  tags:
    - deploy
  block:
    - name: Create Docker network
      community.docker.docker_network:
        name: backend_network
        driver: bridge
        state: present
      register: docker_network

    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      with_items: "{{ directories }}"

    - name: Copy files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      with_items: "{{ files_to_copy }}"

    - name: Render templates
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      with_items: "{{ templates_to_render }}"

    - name: Copy Docker Compose file
      ansible.builtin.template:
        src: docker_compose_debug.yml.j2
        dest: /opt/compose/docker-compose.yml
        mode: '0644'
        owner: root
        group: root
        validate: docker compose -f %s config
      register: compose_file

    - name: Deploy Docker Compose stack
      community.docker.docker_compose_v2:
        project_src: /opt/compose
        files:
          - docker-compose.yml
        state: present
        pull: missing
      register: docker_stack
      notify: Cleanup docker

- name: Maintain Angie configurations with validation and rollback
  notify: Restart angie
  become: true
  tags:
    - deploy
  block:
    - name: Copy main Angie configuration template and backup existing config
      ansible.builtin.template:
        src: test-backends.conf.j2
        dest: "{{ sites.tests_backend.site_agnie_config_path }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      register: updated_main

    - name: Validate Angie configuration
      ansible.builtin.command: angie -t
      when: updated_main is changed or updated_auth_file is changed
      register: validation
      failed_when: validation.rc != 0

  rescue:
    - name: Restore previous main Angie configuration
      ansible.builtin.copy:
        remote_src: true
        dest: "{{ sites.tests_backend.site_agnie_config_path }}"
        src: "{{ updated_main['backup_file'] }}"
      when: updated_main is changed

  always:
    - name: Clean up main config backup file
      ansible.builtin.file:
        path: "{{ updated_main['backup_file'] if updated_main is changed and 'backup_file' in updated_main else None }}"
        state: absent
      when: updated_main is changed and validation is success

