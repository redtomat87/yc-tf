server {
    ## Используем reuseport c целью оптимизации утилизации ресурсов и использование quic
    listen {{ ansible_default_ipv4.address }}:443 ssl;
    ## Включаем quic (udp) для HTTP3
    listen {{ ansible_default_ipv4.address }}:443 quic;

    server_name {{ sites.tests-backend.url }};

    ## HSTS (заставить браузер использовать HTTPS на долгое время)
    add_header Strict-Transport-Security "max-age=63072000" always;


    charset utf-8;

    ## Заказываем и прикручиваем сертификаты. Сертификаты находятся в /var/lib/angie/acme/, если не
    ## переопределено директивой acme_client_path
    acme                 rsa;
    acme                 ecdsa;
    ssl_certificate      $acme_cert_rsa;
    ssl_certificate_key  $acme_cert_key_rsa;
    ssl_certificate      $acme_cert_ecdsa;
    ssl_certificate_key  $acme_cert_key_ecdsa;

    ## Включаем HTTP2 и HTTP3
    http2 on;
    http3 on;
    add_header Alt-Svc 'h3=":443"; ma=86400';

    ## Разрешает отправку оптимизированного пакетного режима при помощи segmentation offloading (Упрощаем обработку траффика на уровне сетевой карты если поддерживается)
    quic_gso on;

    ## Разрешает функциональность QUIC Address Validation,
    ## в том числе отправку нового токена в Retry-пакете или NEW_TOKEN frame и валидацию токена, полученного в Initial-пакете
    quic_retry on;

    location / {
        # Включаем ограничения доступа Ллбо из локальной сети либо по auth_basic
        satisfy any;
        allow 192.168.1.0/24;
        # закрываем доступ без пароля из остальных сетей
        deny all;
        # Включаем Auth Basic
        auth_basic "Identify yourself!";
        auth_basic_user_file "{{ angie.base_auth }}";
        # Активируем ограничение по частоте запросов
        limit_req zone=lone burst=50;
        limit_req_log_level error;
        limit_req_status 503;
        # Активируем ограничение по кол-ву подключений
        limit_conn addr 1000;
        limit_conn_log_level error;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_pass http://test-backend;

    }
}

upstream test-backend {
    server {{ ansible_default_ipv4.address }}:9000;
    server {{ ansible_default_ipv4.address }}:9001;
    server {{ ansible_default_ipv4.address }}:9002;
    server {{ ansible_default_ipv4.address }}:9003;
    keepalive 16;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

#upstream test-backend {
#    hash $request_uri
#    server {{ ansible_default_ipv4.address }}:9000;
#    server {{ ansible_default_ipv4.address }}:9001;
#    server {{ ansible_default_ipv4.address }}:9002;
#    server {{ ansible_default_ipv4.address }}:9003;
#    keepalive 16;
#    keepalive_requests 1000;
#    keepalive_timeout 60s;
#} 

#upstream test-backend {
#    random; two;
#    server {{ ansible_default_ipv4.address }}:9000 down;
#    server {{ ansible_default_ipv4.address }}:9001 backup;
#    server {{ ansible_default_ipv4.address }}:9002;
#    server {{ ansible_default_ipv4.address }}:9003;
#    keepalive 16;
#    keepalive_requests 1000;
#    keepalive_timeout 60s;
#} 