- name: Creating cert dir
  ansible.builtin.file:
    path: /etc/ssl/angie/
    state: directory
    mode: '755'
    owner: _apt
    group: nogroup
  tags:
    - 'angie'

- name: Copy Angie certificates and key
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: _apt
    group: nogroup
    mode: "{{ item.mode }}"
  loop:
    - { src: "files/angie-repo.crt", dest: "/etc/ssl/angie/angie-repo.crt", mode: "0600" }
    - { src: "files/angie-repo.key", dest: "/etc/ssl/angie/angie-repo.key", mode: "0600" }
  tags:
    - 'angie'


- name: Apt cache update
  ansible.builtin.apt:
    update_cache: true
  tags:
    - 'angie'

- name: Installing auxiliary packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - lsb-release
      - ca-certificates
      - curl
      - gnupg2
      - unzip
    state: present
  tags:
    - 'angie'

- name: Downloading Angie repo key
  ansible.builtin.get_url:
    url: https://angie.software/keys/angie-signing.gpg
    dest: /etc/apt/trusted.gpg.d/angie-signing.gpg
  tags:
    - 'angie'

- name: Setup Angie PRO dir
  ansible.builtin.shell: |
    . /etc/os-release && echo "deb https://download.angie.software/angie-pro/$ID/$VERSION_ID $VERSION_CODENAME main" | tee /etc/apt/sources.list.d/angie.list > /dev/null
  args:
    executable: /bin/bash
  tags:
    - 'angie'

- name: Check Angie sources list content
  ansible.builtin.command: cat /etc/apt/sources.list.d/angie.list
  register: angie_sources
  changed_when: false
  tags:
    - 'angie'

- name: Display Angie sources list content
  ansible.builtin.debug:
    var: angie_sources.stdout
  tags:
    - 'angie'


- name: Configuring Angie repo
  ansible.builtin.copy:
    mode: '0644'
    dest: /etc/apt/apt.conf.d/90download-angie
    content: |
      Acquire::https::download.angie.software::Verify-Peer "true";
      Acquire::https::download.angie.software::Verify-Host "true";
      Acquire::https::download.angie.software::SslCert     "/etc/ssl/angie/angie-repo.crt";
      Acquire::https::download.angie.software::SslKey      "/etc/ssl/angie/angie-repo.key";
  tags:
    - 'angie'

- name: Installing angie-pro
  ansible.builtin.apt:
    name: angie-pro
    state: present
  tags:
    - 'angie'

- name: Installing extra modules
  ansible.builtin.apt:
    name:
      - angie-pro-module-zstd
      - angie-pro-module-brotli
    state: present
    update_cache: true
  tags:
    - 'angie'

- name: Creating site dir
  ansible.builtin.file:
    path: /opt/mysite/
    state: directory
    mode: '0750'
    owner: root
    group: angie
  tags:
    - 'angie'

- name: Copy the archived file to the remote host
  ansible.builtin.copy:
    src: static_site-252831-96c1e2.zip
    dest: /tmp/static_site-252831-96c1e2.zip
  tags:
    - 'angie'

- name: Extract the archived file to the specified directory with specific permissions
  ansible.builtin.unarchive:
    src: /tmp/static_site-252831-96c1e2.zip
    dest: /opt/mysite
    remote_src: true
    owner: www-data
    group: www-data
  tags:
    - 'angie'

# - name: Set permissions for directories
#   ansible.builtin.file:
#     path: /opt/mysite
#     state: directory
#     recurse: yes
#     mode: '0750'
#     selevel: 's0'
#     serole: 'object_r'
#     setype: 'httpd_sys_content_t'
#     seuser: 'system_u'
#   when: ansible_selinux.status == "enabled"

# - name: Set permissions for files
#   ansible.builtin.find:
#     paths: /opt/mysite
#     recurse: yes
#     file_type: file
#   register: found_files

# - name: Change permissions of files
#   ansible.builtin.file:
#     path: "{{ item.path }}"
#     mode: '0640'
#   with_items: "{{ found_files.files }}"

- name: Change permissions of directories and files
  ansible.builtin.shell:
    cmd: "find /opt/mysite -type d -exec chmod 0750 {} +; find /opt/mysite -type f -exec chmod 0640 {} +"


- name: Maintain Angie configurations with validation and rollback
  block:
    - name: Copy main Angie configuration template and backup existing config
      template:
        src: angie.conf.j2
        dest: "{{ angie_conf_dest }}"
        backup: yes
        mode: '0640'
        owner: root
        group: root
      register: updated_main

    - name: Copy static site configuration template and backup existing config
      template:
        src: wordpress.conf.j2
        dest: "{{ my_static_site.conf}}"
        backup: yes
        mode: '0640'
        owner: root
        group: root
      register: updated_static_site

    - name: Validate Angie configuration
      command: angie -t
      when: updated_main is changed or updated_static_site is changed
      register: validation
      failed_when: validation.rc != 0

  rescue:
    - name: Restore previous main Angie configuration
      copy:
        remote_src: true
        dest: "{{ angie_conf_dest }}"
        src: "{{ updated_main['backup_file'] }}"
      when: updated_main is changed

    - name: Restore previous WordPress site configuration
      copy:
        remote_src: true
        dest: "{{ angie_wordpress_site }}"
        src: "{{ updated_static_site['backup_file'] }}"
      when: updated_static_site is changed

  always:
    - name: Clean up main config backup file
      file:
        path: "{{ updated_main['backup_file'] }}"
        state: absent
      when: updated_main is changed and validation is success

    - name: Clean up WordPress config backup file
      file:
        path: "{{ updated_static_site['backup_file'] }}"
        state: absent
      when: updated_static_site is changed and validation is success

  notify: Restart angie

