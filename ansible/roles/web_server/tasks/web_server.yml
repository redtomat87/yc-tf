- name: Angie Installation
  tags:
    - 'angie'
  block:
    - name: Install auxiliary packages
      ansible.builtin.apt:
        name:
          - ca-certificates
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - unzip
          - fail2ban
          - prometheus-node-exporter
        state: present
        update_cache: true
        lock_timeout: 600

    - name: Copy template fail2ban jail file
      ansible.builtin.template:
        src: jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0600'
        backup: true

    - name: Add Angie repository key
      ansible.builtin.get_url:
        url: "https://angie.software/keys/angie-signing.gpg"
        dest: "/etc/apt/trusted.gpg.d/angie-signing.gpg"
        mode: '0644'

    - name: Add Angie repository
      ansible.builtin.apt_repository:
        repo: >-
          deb https://download.angie.software/angie/{{ ansible_distribution | lower }}/{{ ansible_distribution_version }}
          {{ ansible_distribution_release }} main
        state: present

    - name: Installing angie with extra modules
      ansible.builtin.apt:
        name:
          - angie
          - angie-module-zstd
          - angie-module-brotli
          - angie-console-light
        state: present
        update_cache: true
        lock_timeout: 600

- name: Prepare Angie Configuration
  block:
    - name: Check default Angie configuration
      ansible.builtin.stat:
        path: "/etc/angie/http.d/default.conf"
      register: default_config

    - name: Backup default Angie configuration
      ansible.builtin.copy:
        remote_src: true
        src: "/etc/angie/http.d/default.conf"
        dest: "/etc/angie/http.d/default.conf.old"
        mode: preserve
        owner: "{{ default_config.stat.pw_name }}"
        group: "{{ default_config.stat.gr_name }}"
      when: default_config.stat.exists

    - name: Remove default Angie configuration
      ansible.builtin.file:
        path: "/etc/angie/http.d/default.conf"
        state: absent
      when: default_config.stat.exists

    - name: Synchronize ACME directories
      ansible.posix.synchronize:
        src: "{{ local_backup.dir }}/{{ item }}/"
        dest: "/var/lib/angie/acme/{{ item }}/"
        mode: push
        recursive: true
        checksum: true
        rsync_opts:
          - "--chmod=D0700,F0600"
          - "--chown=root:root"
          - "--rsync-path='sudo rsync'"
          - "--ignore-existing"
          - "--update"
      loop: "{{ acme.dirs }}"
      delegate_to: localhost
      become: false
      when:
        - (local_backup.dir + '/' + item) is directory

- name: Maintain Angie configurations with validation and rollback
  notify: Restart angie
  tags: 'angie'
  block:
    - name: Copy main Angie configuration template and backup existing config
      ansible.builtin.template:
        src: angie.conf.j2
        dest: "{{ angie.conf_dest }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      register: updated_main

    - name: Copy metrics Angie metrics template and backup existing config
      ansible.builtin.template:
        src: angie-metrics.conf.j2
        dest: "{{ sites.angie.site_agnie_metrics_config_path }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      register: updated_metrics

    - name: Copy static site configuration template and backup existing config
      ansible.builtin.template:
        src: my_static_site.conf.j2
        dest: "{{ sites.static.site_agnie_config_path }}"
        backup: true
        mode: '0640'
        owner: root
        group: root
      register: updated_static_site

    - name: Copy auth configuration template and backup existing config
      ansible.builtin.template:
        src: .htpasswd.j2
        dest: "{{ angie.base_auth }}"
        backup: true
        mode: '0600'
        owner: www-data
        group: www-data
      register: updated_auth_file

    - name: Validate Angie configuration
      ansible.builtin.command: angie -t
      when: updated_main is changed or updated_static_site is changed
      register: validation
      failed_when: validation.rc != 0

  rescue:
    - name: Restore previous main Angie configuration
      ansible.builtin.copy:
        remote_src: true
        dest: "{{ angie.conf_dest }}"
        src: "{{ updated_main['backup_file'] }}"
      when: updated_main is changed

    - name: Restore previous metrics Angie configuration
      ansible.builtin.copy:
        remote_src: true
        dest: "{{ sites.angie.site_agnie_metrics_config_path }}"
        src: "{{ updated_metrics['backup_file'] }}"
      when: updated_metrics is changed

    - name: Restore previous static site configuration
      ansible.builtin.copy:
        remote_src: true
        dest: "{{ sites.static.site_agnie_config_path }}"
        src: "{{ updated_static_site['backup_file'] }}"
      when: updated_static_site is changed

    - name: Restore previous auth configuration template 
      ansible.builtin.copy:
        remote_src: true
        dest: "{{ angie.base_auth }}"
        src: "{{ updated_auth_file['backup_file'] }}"
      when: updated_auth_file is changed

  always:
    - name: Clean up main config backup file
      ansible.builtin.file:
        path: "{{ updated_main.backup_file if updated_main is changed and 'backup_file' in updated_main else None }}"
        state: absent
      when: updated_main is changed and 'backup_file' in updated_main

    - name: Clean up metrics config backup file
      ansible.builtin.file:
        path: "{{ updated_metrics.backup_file if updated_metrics is changed and 'backup_file' in updated_metrics else None }}"
        state: absent
      when: updated_metrics is changed and 'backup_file' in updated_metrics

    - name: Clean up static site config backup file
      ansible.builtin.file:
        path: "{{ updated_static_site.backup_file if updated_static_site is changed and 'backup_file' in updated_static_site else None }}"
        state: absent
      when: updated_static_site is changed and 'backup_file' in updated_static_site

    - name: Clean up auth configuration template 
      ansible.builtin.file:
        path: "{{ updated_auth_file['backup_file'] if updated_auth_file is changed and 'backup_file' in updated_auth_file else None }}"
        state: absent
      when: updated_auth_file is changed and validation is success

- name: Copying static site
  block:
    - name: Creating site dir
      ansible.builtin.file:
        path: /opt/mysite/
        state: directory
        mode: '0750'
        owner: www-data
        group: angie

    - name: Copy the archived file to the remote host
      ansible.builtin.copy:
        src: static_site-252831-96c1e2.zip
        dest: /tmp/static_site-252831-96c1e2.zip
        mode: preserve
        owner: www-data
        group: www-data

    - name: Extract the archived file to the specified directory with specific permissions
      ansible.builtin.unarchive:
        src: /tmp/static_site-252831-96c1e2.zip
        dest: /opt/mysite
        remote_src: true
        owner: www-data
        group: www-data
