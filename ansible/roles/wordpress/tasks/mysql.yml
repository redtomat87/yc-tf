- name: Gather facts for MySQL tasks
  ansible.builtin.setup:
  tags:
    - mysqld_exporter

- name: Installing MySQL
  notify: Restart MySQL
  block:
    - name: Install MySQL server
      ansible.builtin.apt:
        name:
          - python3-pymysql
          - mysql-server
        state: present
        lock_timeout: 600

    - name: Check MySQL service status
      ansible.builtin.service:
        name: mysql
        state: started
      register: mysql_service_status
      failed_when: mysql_service_status.status.ActiveState != "active"
      changed_when: false

    - name: Check if MySQL is using socket authentication
      community.mysql.mysql_query:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        query: SELECT 1
      register: mysql_socket_auth
      ignore_errors: true

    - name: Set MySQL root password for the first time (socket auth)
      community.mysql.mysql_user:
        name: root
        host: localhost
        password: "{{ mysql.root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        priv: '*.*:ALL,GRANT'
        plugin: mysql_native_password
        state: present
        column_case_sensitive: true
      when:
        - mysql_socket_auth is success
        - mysql.root_password != ""

    - name: Check current MySQL root auth method
      community.mysql.mysql_query:
        login_user: root
        login_password: "{{ mysql.root_password }}"
        query: SELECT plugin FROM mysql.user WHERE User='root' AND Host='localhost';
      register: mysql_root_auth_method
      ignore_errors: true

    - name: Change MySQL root authentication to use password
      community.mysql.mysql_user:
        name: root
        host: localhost
        password: "{{ mysql.root_password }}"
        login_user: root
        login_password: "{{ mysql.root_password }}"
        priv: '*.*:ALL,GRANT'
        plugin: mysql_native_password
        state: present
      when:
        - mysql.root_password != ""
        - mysql_root_auth_method.failed or (mysql_root_auth_method.query_result[0][0] != 'mysql_native_password')

    - name: Display MySQL service status
      ansible.builtin.debug:
        msg: "MySQL service is {{ mysql_service_status.status.ActiveState }}"

    - name: Remove anonymous MySQL users
      community.mysql.mysql_user:
        name: ''
        host_all: true
        state: absent
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"

    - name: Remove test database
      community.mysql.mysql_db:
        name: test
        state: absent
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"

    - name: Create MySQL database for WordPress
      community.mysql.mysql_db:
        name: "{{ mysql.wordpress.db }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"

    - name: Create MySQL user for WordPress with remote access
      community.mysql.mysql_user:
        name: "{{ mysql.wordpress.user }}"
        host: '%'
        password: "{{ mysql.wordpress.user_password }}"
        priv: "{{ mysql.wordpress.db }}.*:ALL"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"

    - name: Flush MySQL privileges
      community.mysql.mysql_query:
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"
        query: FLUSH PRIVILEGES;

    - name: Configure MySQL bind addresses
      community.general.ini_file:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        section: mysqld
        option: "{{ item.option }}"
        value: "{{ ansible_default_ipv4.address }}"
      loop:
        - { option: 'bind-address' }
        - { option: 'mysqlx-bind-address' }

- name: Installing mysql prometheus exporter
  tags: mysqld_exporter
  block:
    - name: Create mysqld_exporter system user
      ansible.builtin.user:
        name: "{{ mysql.mysqld_exporter.service_user }}"
        system: true
        shell: /usr/sbin/nologin
        create_home: false

    - name: Create mysqld_exporter configuration directory
      ansible.builtin.file:
        path: /etc/mysqld_exporter
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Create mysqld_exporter configuration file
      ansible.builtin.template:
        src: mysql-exporter/mysqld_exporter.cnf.j2
        dest: /etc/mysqld_exporter/mysqld_exporter.cnf
        owner: root
        group: mysqld_exporter
        mode: '0640'

    - name: Create systemd service file for mysqld_exporter
      ansible.builtin.template:
        src: mysql-exporter/mysqld_exporter.service.j2
        dest: /etc/systemd/system/mysqld_exporter.service
        owner: root
        group: root
        mode: '0644'

    - name: Download mysqld_exporter
      ansible.builtin.get_url:
        url: >- 
          https://github.com/prometheus/mysqld_exporter/releases/download/v{{ mysql.mysqld_exporter.version }}/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64.tar.gz
        dest: "/tmp/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64.tar.gz"
        mode: '0644'

    - name: Extract mysqld_exporter
      ansible.builtin.unarchive:
        src: "/tmp/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64.tar.gz"
        dest: /tmp
        remote_src: true

    - name: Move mysqld_exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: "/tmp/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64/mysqld_exporter"
        dest: /usr/local/bin/mysqld_exporter
        owner: root
        group: root
        mode: '0755'
        remote_src: true

    - name: Create mysqld_exporter MySQL user
      community.mysql.mysql_user:
        name: "{{ mysql.mysqld_exporter.user }}"
        host: "%"
        password: "{{ mysql.mysqld_exporter.password }}"
        priv: '*.*:PROCESS,REPLICATION CLIENT,SELECT'
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_user: root
        login_password: "{{ mysql.root_password }}"
        state: present

    - name: Restart and enable mysqld_exporter service
      ansible.builtin.systemd:
        name: mysqld_exporter
        state: restarted
        enabled: true
        daemon_reload: true

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64.tar.gz"
        - "/tmp/mysqld_exporter-{{ mysql.mysqld_exporter.version }}.linux-amd64"
