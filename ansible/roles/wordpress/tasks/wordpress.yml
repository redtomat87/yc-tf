- name: Apt cache update
  ansible.builtin.apt:
    update_cache: true
  tags:
    - 'angie'

- name: Install PHP and required modules
  become: true
  ansible.builtin.apt:
    name:
      - php-fpm
      - php-curl
      - php-mysqli
      - php-gd
      - php-intl
      - php-mbstring
      - php-soap
      - php-xml
      - php-xmlrpc
      - php-zip
    state: present

- name: Creating cache directory
  ansible.builtin.file:
    path: /opt/cache/worpress
    state: directory
    mode: '755'
    owner: www-data
    group: www-data
  tags:
    - 'angie'

- name: Install WordPress
  become: true
  ansible.builtin.get_url:
    url: https://wordpress.org/latest.tar.gz
    dest: /tmp/latest.tar.gz
    mode: '0644'

- name: Creating site dir
  ansible.builtin.file:
    path: /var/www/
    state: directory
    mode: '750'
    owner: www-data
    group: www-data

- name: Extract wordpress
  ansible.builtin.unarchive:
    src: /tmp/latest.tar.gz
    dest: /var/www/
    remote_src: true
    owner: www-data
    group: www-data

- name: Maintain Angie configurations with validation and rollback
  block:
    - name: Copy main Angie configuration template and backup existing config
      template:
        src: angie.conf.j2
        dest: "{{ angie_conf_dest }}"
        backup: yes
        mode: '0640'
        owner: root
        group: root
      register: updated_main

    - name: Copy WordPress site configuration template and backup existing config
      template:
        src: wordpress.conf.j2
        dest: "{{ angie_wordpress_site }}"
        backup: yes
        mode: '0640'
        owner: root
        group: root
      register: updated_wordpress

    - name: Validate Angie configuration
      command: angie -t
      when: updated_main is changed or updated_wordpress is changed
      register: validation
      failed_when: validation.rc != 0

  rescue:
    - name: Restore previous main Angie configuration
      copy:
        remote_src: true
        dest: "{{ angie_conf_dest }}"
        src: "{{ updated_main['backup_file'] }}"
      when: updated_main is changed

    - name: Restore previous WordPress site configuration
      copy:
        remote_src: true
        dest: "{{ angie_wordpress_site }}"
        src: "{{ updated_wordpress['backup_file'] }}"
      when: updated_wordpress is changed

  always:
    - name: Clean up main config backup file
      file:
        path: "{{ updated_main['backup_file'] if updated_main is changed and 'backup_file' in updated_main else None }}"
        state: absent
      when: updated_main is changed and validation is success

    - name: Clean up WordPress config backup file
      file:
        path: "{{ updated_wordpress['backup_file'] if updated_wordpress is changed and 'backup_file' in updated_wordpress else None }}"
        state: absent
      when: updated_wordpress is changed and validation is success

  notify: Restart angie

- name: Configure wp-config.php
  become: true
  ansible.builtin.template:
    src: templates/wp-config.php.j2
    dest: /var/www/wordpress/wp-config.php
    mode: '0644'
  notify: Restart MySQL

- name: Set correct permissions for WordPress files
  become: true
  ansible.builtin.file:
    path: /var/www/wordpress
    owner: www-data
    group: www-data
    recurse: true
    state: directory



